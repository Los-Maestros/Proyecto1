/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.*;
import java.util.Arrays;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {


        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida = "";
        Map<String, Integer> Variables = new HashMap<>();
        Map<String, ArrayList<String>> Functions = new HashMap<>();

//boolean command(uniandes.lym.robot.view.Console sistema):
  final public boolean command(Console sistema) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFVAR:
    case DEFPROC:
    case 42:{
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEFVAR:{
          VariableDefine(sistema);
          break;
          }
        case DEFPROC:{
          FunctionDefine(sistema);
          break;
          }
        case 42:{
          jj_consume_token(42);
          Block(sistema);
          jj_consume_token(43);
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEFVAR:
        case DEFPROC:
        case 42:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
try { Thread.sleep(900);
                } catch (InterruptedException e) {
                  System.err.format("IOException: %s%n", e);
        }
                {if ("" != null) return true;}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void OldCommands(Console sistema) throws ParseException {int x,y;
  salida=new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RIGHT:{
      jj_consume_token(RIGHT);
      jj_consume_token(44);
world.turnRight();salida = "\nCommand: Turnright";
      break;
      }
    case MOV:{
      jj_consume_token(MOV);
      jj_consume_token(45);
      x = num();
      jj_consume_token(46);
world.moveForward(x,false);salida = "\nCommand: Moveforward ";
      break;
      }
    case HOP:{
      jj_consume_token(HOP);
      jj_consume_token(45);
      x = num();
      jj_consume_token(46);
world.moveForward(x,true);salida = "\nCommand:Jumpforward ";
      break;
      }
    case GO:{
      jj_consume_token(GO);
      jj_consume_token(45);
      x = num();
      jj_consume_token(47);
      y = num();
      jj_consume_token(46);
world.setPostion(x,y);salida = "\nCommand:GO ";
      break;
      }
    case PUT:{
      jj_consume_token(PUT);
      jj_consume_token(45);
      put();
      jj_consume_token(46);
      break;
      }
    case PICK:{
      jj_consume_token(PICK);
      jj_consume_token(45);
      get();
      jj_consume_token(46);
      break;
      }
    case POP:{
      jj_consume_token(POP);
      jj_consume_token(45);
      x = num();
      jj_consume_token(46);
world.popBalloons(x); salida = "\nComando:  Pop";
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
sistema.printOutput(salida);
}

// CAMBIOS AL PARSER PARA NUEVAS FUNCIONES:
  final public void Command(Console sistema) throws ParseException {Token tDir;
  Token tValue;
  Token tValuex;
  Token tValuey;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case JUMP:{
      jj_consume_token(JUMP);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValuex = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValuex = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(47);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValuey = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValuey = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(46);
// TODO: Ejemplo de como funcionarian las demas, tienes que buscar la funcion en el RobotWorld.java e implementarla
      // aqui, ej world.setPosition sirve como jump y previene al usuario de saltar en caso de que este el bloque ocupado.
      world.setPostion(Integer.parseInt(tValuex.image),Integer.parseInt(tValuey.image));
      salida = "\nJUMP x: " + tValuex.image+", y: " + tValuey.image + ")";
      break;
      }
    case WALK:{
      tDir = jj_consume_token(WALK);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValue = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValue = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        jj_consume_token(47);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DIRECTION:{
          tDir = jj_consume_token(DIRECTION);
          break;
          }
        case CARDINALDIR:{
          tDir = jj_consume_token(CARDINALDIR);
          break;
          }
        case WALKDIR:{
          tDir = jj_consume_token(WALKDIR);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(46);
salida = "\nWALK v: " + tValue.image + " d: " + tDir.image;
    // TODO: Completar

      break;
      }
    case LEAP:{
      tDir = jj_consume_token(LEAP);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValue = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValue = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        jj_consume_token(47);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DIRECTION:{
          tDir = jj_consume_token(DIRECTION);
          break;
          }
        case CARDINALDIR:{
          tDir = jj_consume_token(CARDINALDIR);
          break;
          }
        case WALKDIR:{
          tDir = jj_consume_token(WALKDIR);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(46);
salida = "\nLEAP v: " + tValue.image + " d: " + tDir.image;
        // TODO: Completar

      break;
      }
    case TURN:{
      jj_consume_token(TURN);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DIRECTION:{
        tDir = jj_consume_token(DIRECTION);
        break;
        }
      case TURNDIR:{
        tDir = jj_consume_token(TURNDIR);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(46);
salida = "\nTURN d: " + tDir.image;
        // TODO: Completar

      break;
      }
    case TURNTO:{
      jj_consume_token(TURNTO);
      jj_consume_token(45);
      tDir = jj_consume_token(CARDINALDIR);
      jj_consume_token(46);
salida = "\nTURNTO d: " + tDir.image;
        // TODO: Completar

      break;
      }
    case DROP:{
      jj_consume_token(DROP);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValue = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValue = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(46);
salida = "\nDROP v: " + tValue.image;
    // TODO: Completar

      break;
      }
    case GET:{
      jj_consume_token(GET);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValue = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValue = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(46);
salida = "\nGET v: " + tValue.image;
    // TODO: Completar

      break;
      }
    case GRAB:{
      jj_consume_token(GRAB);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValue = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValue = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(46);
salida = "\nGRAB v: " + tValue.image;
    // TODO: Completar

      break;
      }
    case LETGO:{
      jj_consume_token(LETGO);
      jj_consume_token(45);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValue = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValue = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(46);
salida = "\nLETGO v: " + tValue.image;
    // TODO: Completar

      break;
      }
    case NOP:{
      jj_consume_token(NOP);
      jj_consume_token(44);
salida = "\nNOP";
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
sistema.printOutput(salida);
}

  final public void FunctionCall(Console sistema) throws ParseException {Token Name;
  Token Value;
  ArrayList<String> parameters = new ArrayList<String>();
    Name = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:{
      jj_consume_token(45);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUM:{
          Value = jj_consume_token(NUM);
          break;
          }
        case NAME:{
          Value = jj_consume_token(NAME);
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
parameters.add(Value.image);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 47:{
            ;
            break;
            }
          default:
            jj_la1[19] = jj_gen;
            break label_3;
          }
          jj_consume_token(47);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case NUM:{
            Value = jj_consume_token(NUM);
            break;
            }
          case NAME:{
            Value = jj_consume_token(NAME);
            break;
            }
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
parameters.add(Value.image);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUM:
        case NAME:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_2;
        }
      }
      jj_consume_token(46);
      break;
      }
    case 44:{
      jj_consume_token(44);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (!Functions.containsKey(Name.image)) {
      salida = "\nERROR FUNCION: " + Name.image + " NO DEFINIDA";
    } else {
      // TODO: Completar que pasa si existe
      // Analizar que el numero de parametros coincida, que las los parametros si son variables tengan un valor o sean un integro
      salida = "\nFUNCION: " + Name.image + " DEFINIDA";
    }
    sistema.printOutput(salida);
}

  final public void FunctionDefine(Console sistema) throws ParseException {Token Name;
  Token Value;
  ArrayList<String> parameters = new ArrayList<String>();
    jj_consume_token(DEFPROC);
    Name = jj_consume_token(NAME);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:{
      jj_consume_token(45);
      label_4:
      while (true) {
        Value = jj_consume_token(NAME);
parameters.add(Value.image);
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 47:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_5;
          }
          jj_consume_token(47);
          Value = jj_consume_token(NAME);
parameters.add(Value.image);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NAME:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(46);
      break;
      }
    case 44:{
      jj_consume_token(44);
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(42);
    Block(sistema);
    jj_consume_token(43);
salida = "\nFUNCION: " + Name.image + " DEFINIDA CON PARAMETROS " + Arrays.toString(parameters.toArray());
    Functions.put(Name.image, parameters);
    sistema.printOutput(salida);
    // TODO: Leer que hace esta parte

}

  final public void VariableDefine(Console sistema) throws ParseException {Token tVar;
  Token tValue;
    jj_consume_token(DEFVAR);
    tVar = jj_consume_token(NAME);
    tValue = jj_consume_token(NUM);
salida = "\nVAR " + tVar.image + " = " + tValue.image;
    Variables.put(tVar.image, Integer.parseInt(tValue.image));
    sistema.printOutput(salida);
    // TODO: Leer que hace esta parte

}

  final public void Block(Console sistema) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case JUMP:
    case WALK:
    case LEAP:
    case TURN:
    case TURNTO:
    case DROP:
    case GET:
    case GRAB:
    case LETGO:
    case NOP:{
      Command(sistema);
      break;
      }
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:{
      OldCommands(sistema);
      break;
      }
    case NAME:{
      FunctionCall(sistema);
      break;
      }
    case IF:
    case WHILE:
    case REPEAT:{
      CommandStructure(sistema);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 48:{
      jj_consume_token(48);
      Block(sistema);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      ;
    }
}

  final public void CommandStructure(Console sistema) throws ParseException {Token tValue;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      jj_consume_token(IF);
      Condition(sistema);
      jj_consume_token(42);
      Block(sistema);
      jj_consume_token(43);
      jj_consume_token(ELSE);
      jj_consume_token(42);
      Block(sistema);
      jj_consume_token(43);
salida = "\nIF ";
    // TODO: Completar

      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      Condition(sistema);
      jj_consume_token(42);
      Block(sistema);
      jj_consume_token(43);
salida = "\nWHILE ";
        // TODO: Completar 

      break;
      }
    case REPEAT:{
      jj_consume_token(REPEAT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
        tValue = jj_consume_token(NUM);
        break;
        }
      case NAME:{
        tValue = jj_consume_token(NAME);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(TIMES);
      jj_consume_token(42);
      Block(sistema);
      jj_consume_token(43);
salida = "\nREPEAT ";
    // TODO: Completar

      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
sistema.printOutput(salida);
}

  final public void Condition(Console sistema) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FACING:{
      jj_consume_token(FACING);
      jj_consume_token(45);
      jj_consume_token(CARDINALDIR);
      jj_consume_token(46);
salida = "\nFACING ";
    // TODO: Completar

      break;
      }
    case CAN:{
      jj_consume_token(CAN);
      jj_consume_token(45);
      Command(sistema);
      jj_consume_token(46);
salida = "\nCAN ";
    // TODO: Completar

      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(49);
      Condition(sistema);
salida = "\nNot ";
    // TODO: Completar

      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
sistema.printOutput(salida);
}

// FUNCIONES VIEJAS
  final public 
void put() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(47);
      f = num();
world.putChips(f); salida = "\nCommand:  Put Chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(47);
      f = num();
world.putBalloons(f); salida = "\nCommand:  Put Balloons";
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void get() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(47);
      f = num();
world.pickChips(f);salida = "\nCommand:  Pick chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(47);
      f = num();
world.grabBalloons(f);salida="\nCommand:  Pick balloons";
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
 * Unsigned decimal number
 * @return the corresponding value of the string
 * @error  corresponding value is too large
 */
  final public 
int num() throws ParseException, Error {int total=1;
    jj_consume_token(NUM);
try
                {
                        total = Integer.parseInt(token.image);
                }
                catch (NumberFormatException ee)
                {
                        {if (true) throw new Error("\nNumber out of bounds: "+token.image+" !!");}
                }
                {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x60,0x60,0x61,0xe0000000,0x0,0x0,0x0,0xe0000,0x0,0x0,0xe0000,0x0,0x140000,0x0,0x0,0x0,0x0,0x1ff80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe1a1ff80,0x0,0x0,0x1a00000,0x1c000000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x400,0x400,0x400,0xf,0x140,0x140,0x140,0x0,0x8000,0x140,0x0,0x8000,0x0,0x140,0x140,0x140,0x140,0x0,0x140,0x8000,0x140,0x140,0x3000,0x8000,0x100,0x3000,0x10f,0x10000,0x140,0x0,0x0,0x30,0x30,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[50];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 33; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 50; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        // TODO: Añadir funciones o varibles que neceistes para evaluar el parser!!!
}
